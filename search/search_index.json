{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"ESP8266/","text":"ESP8266 ESP8266 is a low cost Wi-Fi microchi with full TCP/IP stand and microcontroller capability - see wiki Getting started This is a quick guide to get started on ESP8266 using a Ubuntu 16.04 LTS host Things required: 1. ESP2866 board :avalaible from amazon.com under 10$ 2. USB cable to connect Ubuntu to ESP8266 STEP 1: Prepare Ubuntu murthy@ugm-7976:~$ ls -l /dev/ttyUSB* ls: cannot access '/dev/ttyUSB*': No such file or directory # CONNECT THE ESP8266 to Ubuntu using the USB Cable $ ls /dev/ttyUSB* murthy@ugm-7976:~$ ls -l /dev/ttyUSB* crw-rw---- 1 root dialout 188, 0 Oct 5 17:53 /dev/ttyUSB0 # thats the port to remember when uploading firmware to ESP8266 # Note we have rw access for root and groups (tty and dialout) # Ensure you are part of tty and dialout - one of them should work for you # here is how to check your group membership murthy@ugm-7976:~$ groups | sort murthy adm tty dialout cdrom sudo dip plugdev lpadmin sambashare # if you are not part of tty and/or dialout then # sudo usermod -a -G tty yourname # sudo usermod -a -G dialout yourname # re-login # check you group membership again STEP 2: Deploy Firmware Follow micropython guide to install esptools , downloading and deploting firmware - all the way upto section 1.5 of that guide. STEP 3: Micropython REPL Assuming successful deployment. Install picocom (a minimalistic dumb terminal emulator) murthy@ugm-7976:~$ sudo apt install picocom murthy@ugm-7976:~$ picocom /dev/ttyUSB0 -b115200 ## you should now be able to use the Micropython REPL ## you will get some gibberish chars on the screen before the OSError line ## OSError to be ingored - its there because main.py is missing OSError: [Errno 2] ENOENT MicroPython v1.9-6-g821dc27e-dirty on 2017-07-21; ESP module with ESP8266 Type \"help()\" for more information. >>> p = 10 >>> print(p) 10 >>> help(\"modules\") __main__ gc socket urandom _boot inisetup sys ure _onewire json time uselect _webrepl lwip ubinascii usocket apa102 machine ucollections ussl array math uctypes ustruct btree micropython uerrno utime builtins neopixel uhashlib utimeq dht network uheapq uzlib ds18x20 ntptime uio webrepl errno onewire ujson webrepl_setup esp os uos websocket flashbdev port_diag upip websocket_helper framebuf select upip_utarfile Plus any modules on the filesystem >>>","title":"ESP8266"},{"location":"ESP8266/#esp8266","text":"ESP8266 is a low cost Wi-Fi microchi with full TCP/IP stand and microcontroller capability - see wiki","title":"ESP8266"},{"location":"ESP8266/#getting-started","text":"This is a quick guide to get started on ESP8266 using a Ubuntu 16.04 LTS host Things required: 1. ESP2866 board :avalaible from amazon.com under 10$ 2. USB cable to connect Ubuntu to ESP8266","title":"Getting started"},{"location":"ESP8266/#step-1-prepare-ubuntu","text":"murthy@ugm-7976:~$ ls -l /dev/ttyUSB* ls: cannot access '/dev/ttyUSB*': No such file or directory # CONNECT THE ESP8266 to Ubuntu using the USB Cable $ ls /dev/ttyUSB* murthy@ugm-7976:~$ ls -l /dev/ttyUSB* crw-rw---- 1 root dialout 188, 0 Oct 5 17:53 /dev/ttyUSB0 # thats the port to remember when uploading firmware to ESP8266 # Note we have rw access for root and groups (tty and dialout) # Ensure you are part of tty and dialout - one of them should work for you # here is how to check your group membership murthy@ugm-7976:~$ groups | sort murthy adm tty dialout cdrom sudo dip plugdev lpadmin sambashare # if you are not part of tty and/or dialout then # sudo usermod -a -G tty yourname # sudo usermod -a -G dialout yourname # re-login # check you group membership again","title":"STEP 1: Prepare Ubuntu"},{"location":"ESP8266/#step-2-deploy-firmware","text":"Follow micropython guide to install esptools , downloading and deploting firmware - all the way upto section 1.5 of that guide.","title":"STEP 2: Deploy Firmware"},{"location":"ESP8266/#step-3-micropython-repl","text":"Assuming successful deployment. Install picocom (a minimalistic dumb terminal emulator) murthy@ugm-7976:~$ sudo apt install picocom murthy@ugm-7976:~$ picocom /dev/ttyUSB0 -b115200 ## you should now be able to use the Micropython REPL ## you will get some gibberish chars on the screen before the OSError line ## OSError to be ingored - its there because main.py is missing OSError: [Errno 2] ENOENT MicroPython v1.9-6-g821dc27e-dirty on 2017-07-21; ESP module with ESP8266 Type \"help()\" for more information. >>> p = 10 >>> print(p) 10 >>> help(\"modules\") __main__ gc socket urandom _boot inisetup sys ure _onewire json time uselect _webrepl lwip ubinascii usocket apa102 machine ucollections ussl array math uctypes ustruct btree micropython uerrno utime builtins neopixel uhashlib utimeq dht network uheapq uzlib ds18x20 ntptime uio webrepl errno onewire ujson webrepl_setup esp os uos websocket flashbdev port_diag upip websocket_helper framebuf select upip_utarfile Plus any modules on the filesystem >>>","title":"STEP 3: Micropython REPL"},{"location":"about/","text":"About this site Purpose Main purpose of documeting the work is: to record what I learnt to refer my learnings share it with larger community","title":"About"},{"location":"about/#about-this-site","text":"","title":"About this site"},{"location":"about/#purpose","text":"Main purpose of documeting the work is: to record what I learnt to refer my learnings share it with larger community","title":"Purpose"},{"location":"p5js/","text":"p5.js p5.js is a javascript library to make coding accessible for artists, designers, educators and beginners. p5.js Tutorial This tutorial is an attempt to give a quick inroduction to p5.js and consists of short code snippets with explanations in the comments section of the code. The Tutorial assumes you have installed or have access to the necessary p5.js files. Visit p5.js in case you need installation details. if you do not want to install p5.js but want to quickly try things our then here is an online editor/previewer . Have fun.... Program Structure var x=0 // global variables function setup () { // runs once during the lifetime of this script } function draw () { // called 60 time every second by default } Try this var bg=0 // global variables var inc=1 // increment function setup () { // create a canvas 400 pixels by 400 pixels createCanvas(400,400) } // called 60 time every second by default function draw () { background(bg) // draw a background with grey shade indicated by bg bg = bg+inc // increment bg by 1 every 1/60 of a second // ensure bg value oscillates between 0 and 255 if (bg > 255) { inc = -1 bg=255 } if (bg < 0) { inc=1 bg=0 } } what you will notice is the that the background color of the canvas goes from white to black and black to white indefintely Canvas The canvas is where the draw() draws and is created by createCanvas(w,h,[renderer]) function the renderer by default is P2D , other options being WEBGL in case you are interested is drawing 3d shapes. Read more about the WEBGL here Top left corner in the Canvas is (0,0) x-Axis runs from 0 on the left to positive numbers on the right, whereas the y-Axis starts with 0 on the top with positive numbers along y-Axis going down. need a small diagram here Lines Drawing lines is simple. All you need is two points (a,b) and (c,d) . Using line(a,b,c,d) we will get a line connecting the two point. function setup() { createCanvas(400,400) } function draw() { line(x,10,100,150) } Shapes One can also draw common shapes like ellipse, rectangle, triangle etc. see p5 Reference for more shapes here is an example: function setup() { createCanvas(400,400) } function draw() { line(10,10,100,150) // given top left corner and width and height // draw a rectangle rect(10,10,100,100) // given a center point and width and height of // horizontal and vertical axis - draw a ellipse // if widht=height you get a circle ellipse(20,20,10,100) ellipse(10,100,50,50) } Mouse Its possible to use mouse events and position to manipulate the graphics. mouseX and mouseY always refer to current mouse position. The mousePressed() is called when mouse is pressed and the code here will modify the position of ellipse being drawn. // let cx,cy be the position of center of ellipse var cx=100 var cy=100 function setup() { createCanvas(400,400) } function draw() { // draw background of white every time draw is called // by doing this you will see only one ellipse // try running this script without background(255) background(255) // given a center point and width and height of // horizontal and vertical axis - draw a ellipse // if widht=height you get a circle ellipse(cx,cy,mouseX,mouseY) } // when mouse is pressed update center co-ordinates function mousePressed() { cx = mouseX cy = mouseY } Sound Projects 1. eyes 2. Motion 3. Music and Motion 4. Generate Surface","title":"p5.js"},{"location":"p5js/#p5js","text":"p5.js is a javascript library to make coding accessible for artists, designers, educators and beginners.","title":"p5.js"},{"location":"p5js/#p5js-tutorial","text":"This tutorial is an attempt to give a quick inroduction to p5.js and consists of short code snippets with explanations in the comments section of the code. The Tutorial assumes you have installed or have access to the necessary p5.js files. Visit p5.js in case you need installation details. if you do not want to install p5.js but want to quickly try things our then here is an online editor/previewer . Have fun....","title":"p5.js Tutorial"},{"location":"p5js/#program-structure","text":"var x=0 // global variables function setup () { // runs once during the lifetime of this script } function draw () { // called 60 time every second by default } Try this var bg=0 // global variables var inc=1 // increment function setup () { // create a canvas 400 pixels by 400 pixels createCanvas(400,400) } // called 60 time every second by default function draw () { background(bg) // draw a background with grey shade indicated by bg bg = bg+inc // increment bg by 1 every 1/60 of a second // ensure bg value oscillates between 0 and 255 if (bg > 255) { inc = -1 bg=255 } if (bg < 0) { inc=1 bg=0 } } what you will notice is the that the background color of the canvas goes from white to black and black to white indefintely","title":"Program Structure"},{"location":"p5js/#canvas","text":"The canvas is where the draw() draws and is created by createCanvas(w,h,[renderer]) function the renderer by default is P2D , other options being WEBGL in case you are interested is drawing 3d shapes. Read more about the WEBGL here Top left corner in the Canvas is (0,0) x-Axis runs from 0 on the left to positive numbers on the right, whereas the y-Axis starts with 0 on the top with positive numbers along y-Axis going down. need a small diagram here","title":"Canvas"},{"location":"p5js/#lines","text":"Drawing lines is simple. All you need is two points (a,b) and (c,d) . Using line(a,b,c,d) we will get a line connecting the two point. function setup() { createCanvas(400,400) } function draw() { line(x,10,100,150) }","title":"Lines"},{"location":"p5js/#shapes","text":"One can also draw common shapes like ellipse, rectangle, triangle etc. see p5 Reference for more shapes here is an example: function setup() { createCanvas(400,400) } function draw() { line(10,10,100,150) // given top left corner and width and height // draw a rectangle rect(10,10,100,100) // given a center point and width and height of // horizontal and vertical axis - draw a ellipse // if widht=height you get a circle ellipse(20,20,10,100) ellipse(10,100,50,50) }","title":"Shapes"},{"location":"p5js/#mouse","text":"Its possible to use mouse events and position to manipulate the graphics. mouseX and mouseY always refer to current mouse position. The mousePressed() is called when mouse is pressed and the code here will modify the position of ellipse being drawn. // let cx,cy be the position of center of ellipse var cx=100 var cy=100 function setup() { createCanvas(400,400) } function draw() { // draw background of white every time draw is called // by doing this you will see only one ellipse // try running this script without background(255) background(255) // given a center point and width and height of // horizontal and vertical axis - draw a ellipse // if widht=height you get a circle ellipse(cx,cy,mouseX,mouseY) } // when mouse is pressed update center co-ordinates function mousePressed() { cx = mouseX cy = mouseY }","title":"Mouse"},{"location":"p5js/#sound","text":"","title":"Sound"},{"location":"p5js/#projects","text":"","title":"Projects"},{"location":"p5js/#1-eyes","text":"","title":"1. eyes"},{"location":"p5js/#2-motion","text":"","title":"2. Motion"},{"location":"p5js/#3-music-and-motion","text":"","title":"3. Music and Motion"},{"location":"p5js/#4-generate-surface","text":"","title":"4. Generate Surface"}]}